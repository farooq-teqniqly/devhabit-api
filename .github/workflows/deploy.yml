name: Deploy to Azure

on:
  push:
    branches: [main]
    paths:
      - '.github/workflows/deploy.yml'
      - 'deployment/**/*.bicep'
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      root_name:
        description: 'Root name for resources (e.g., tq123devhabit)'
        required: true
        default: 'tq123devhabit'
      location:
        description: 'Azure region for resources (e.g., westus2)'
        required: true
        default: 'westus2'

env:
  ROOT_NAME: ${{ github.event.inputs.root_name || 'tq123devhabit' }}
  LOCATION: ${{ github.event.inputs.location || 'westus2' }}


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get commit hash
      id: commit
      run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Create resource group
      run: az group create --name ${{ env.ROOT_NAME }}-rg --location ${{ env.LOCATION }}

    - name: Upgrade Bicep CLI
      run: az bicep upgrade

    - name: Deploy Infrastructure
      id: deploy
      run: |
        az deployment group create \
          --name "${{ env.ROOT_NAME }}-deploy-infra-${{ steps.commit.outputs.hash }}" \
          --resource-group ${{ env.ROOT_NAME }}-rg \
          --template-file deployment/main.bicep \
          --parameters \
            rootName=${{ env.ROOT_NAME }} \
            sqlUsername=${{ secrets.SQL_USERNAME }} \
            sqlPassword=${{ secrets.SQL_PASSWORD }}


    - name: Get deployment outputs
      id: outputs
      run: |
        outputs=$(az deployment group show --name ${{ env.ROOT_NAME }}-deploy-infra-${{ steps.commit.outputs.hash }} --resource-group ${{ env.ROOT_NAME }}-rg --query properties.outputs -o json)
        echo "acr_name=$(echo $outputs | jq -r '.appservice_env_AZURE_CONTAINER_REGISTRY_NAME.value')" >> $GITHUB_OUTPUT
        echo "acr_endpoint=$(echo $outputs | jq -r '.appservice_env_AZURE_CONTAINER_REGISTRY_ENDPOINT.value')" >> $GITHUB_OUTPUT
        echo "plan_id=$(echo $outputs | jq -r '.appservice_env_planId.value')" >> $GITHUB_OUTPUT
        echo "mi_id=$(echo $outputs | jq -r '.appservice_env_AZURE_CONTAINER_REGISTRY_MANAGED_IDENTITY_ID.value')" >> $GITHUB_OUTPUT
        echo "mi_client_id=$(echo $outputs | jq -r '.appservice_env_AZURE_CONTAINER_REGISTRY_MANAGED_IDENTITY_CLIENT_ID.value')" >> $GITHUB_OUTPUT

    - name: Build Docker image
      run: |
        cd DevHabit.Api
        dotnet publish --configuration Release /t:PublishContainer /p:ContainerRepository="${{ env.ROOT_NAME }}-api" /p:ContainerRuntimeIdentifier="linux-x64"
        cd ..

    - name: Login to ACR
      run: az acr login --name ${{ steps.outputs.outputs.acr_name }}

    - name: Tag and push image
      run: |
        docker tag ${{ env.ROOT_NAME }}-api:latest ${{ steps.outputs.outputs.acr_endpoint }}/${{ env.ROOT_NAME }}-api:latest
        docker push ${{ steps.outputs.outputs.acr_endpoint }}/${{ env.ROOT_NAME }}-api:latest
    
    - name: Deploy webapp
      run: |
        az deployment group create \
          --name "${{ env.ROOT_NAME }}-deploy-webapp-${{ steps.commit.outputs.hash }}" \
          --resource-group ${{ env.ROOT_NAME }}-rg \
          --template-file deployment/devhabit-api/devhabit-api.bicep \
          --parameters \
            rootName=${{ env.ROOT_NAME }} \
            appservice_env_outputs_planid='${{ steps.outputs.outputs.plan_id }}' \
            appservice_env_outputs_azure_container_registry_managed_identity_id='${{ steps.outputs.outputs.mi_id }}' \
            appservice_env_outputs_azure_container_registry_managed_identity_client_id='${{ steps.outputs.outputs.mi_client_id }}' \
            devhabit_api_containerimage='${{ steps.outputs.outputs.acr_endpoint }}/${{ env.ROOT_NAME }}-api:latest'
