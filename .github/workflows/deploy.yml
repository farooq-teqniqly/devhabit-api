name: Deploy to Azure

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      root_name:
        description: 'Root name for resources (e.g., tq123devhabit)'
        required: true
        default: 'tq123devhabit'
      location:
        description: 'Azure region for resources (e.g., westus2)'
        required: true
        default: 'westus2'

env:
  ROOT_NAME: ${{ github.event.inputs.root_name || 'tq123devhabit' }}
  LOCATION: ${{ github.event.inputs.location || 'westus2' }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create resource group
      run: |
        set -euo pipefail
        RG="${{ env.ROOT_NAME }}-rg"
        SUB="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        LOC="${{ env.LOCATION }}"
        if az group show --name "$RG" --subscription "$SUB" >/dev/null 2>&1; then
          current_loc=$(az group show --name "$RG" --subscription "$SUB" --query location -o tsv)
          if [ "$current_loc" != "$LOC" ]; then
            echo "Resource group '$RG' exists in '$current_loc', but requested location is '$LOC'." >&2
            exit 1
          fi
          echo "Resource group '$RG' already exists in '$current_loc'."
        else
          az group create --name "$RG" --location "$LOC" --subscription "$SUB"
        fi

    - name: Upgrade Bicep CLI
      run: az bicep upgrade

    - name: Deploy infrastructure
      id: infra_deploy
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        resourceGroupName: ${{ env.ROOT_NAME }}-rg
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        template: deployment/main.bicep
        parameters: rootName='${{ env.ROOT_NAME }}'

    - name: Get deployment outputs
      id: outputs
      run: |
        outputs=$(az deployment group show --name gh-deploy-${{ github.run_number }} --resource-group ${{ env.ROOT_NAME }}-rg --query properties.outputs -o json)
        echo "acr_name=$(echo $outputs | jq -r '.appservice_env_AZURE_CONTAINER_REGISTRY_NAME.value')" >> $GITHUB_OUTPUT
        echo "acr_endpoint=$(echo $outputs | jq -r '.appservice_env_AZURE_CONTAINER_REGISTRY_ENDPOINT.value')" >> $GITHUB_OUTPUT
        echo "plan_id=$(echo $outputs | jq -r '.appservice_env_planId.value')" >> $GITHUB_OUTPUT
        echo "mi_id=$(echo $outputs | jq -r '.appservice_env_AZURE_CONTAINER_REGISTRY_MANAGED_IDENTITY_ID.value')" >> $GITHUB_OUTPUT
        echo "mi_client_id=$(echo $outputs | jq -r '.appservice_env_AZURE_CONTAINER_REGISTRY_MANAGED_IDENTITY_CLIENT_ID.value')" >> $GITHUB_OUTPUT

    - name: Build Docker image
      run: |
        cd DevHabit.Api
        dotnet publish --configuration Release /t:PublishContainer /p:ContainerRepository="${{ env.ROOT_NAME }}-api" /p:ContainerRuntimeIdentifier="linux-x64"
        cd ..

    - name: Login to ACR
      run: az acr login --name ${{ steps.outputs.outputs.acr_name }}

    - name: Tag and push image
      run: |
        docker tag ${{ env.ROOT_NAME }}-api:latest ${{ steps.outputs.outputs.acr_endpoint }}/${{ env.ROOT_NAME }}-api:latest
        docker push ${{ steps.outputs.outputs.acr_endpoint }}/${{ env.ROOT_NAME }}-api:latest

    - name: Deploy webapp
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        resourceGroupName: ${{ env.ROOT_NAME }}-rg
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        template: deployment/devhabit-api/devhabit-api.bicep
        parameters: |
          rootName='${{ env.ROOT_NAME }}'
          appservice_env_outputs_azure_container_registry_endpoint='${{ steps.outputs.outputs.acr_endpoint }}'
          appservice_env_outputs_planid='${{ steps.outputs.outputs.plan_id }}'
          appservice_env_outputs_azure_container_registry_managed_identity_id='${{ steps.outputs.outputs.mi_id }}'
          appservice_env_outputs_azure_container_registry_managed_identity_client_id='${{ steps.outputs.outputs.mi_client_id }}'
          devhabit_api_containerimage='${{ steps.outputs.outputs.acr_endpoint }}/${{ env.ROOT_NAME }}-api:latest'
          devhabit_api_containerport='80'
